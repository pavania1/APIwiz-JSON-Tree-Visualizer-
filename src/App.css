/* import React, { useState, useEffect, useRef } from 'react';
import * as d3 from 'd3';
import { Search, Sun, Moon, Trash2, Copy, Download, ZoomIn, ZoomOut, Maximize2 } from 'lucide-react';

const sampleJSON = {
  "user": {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "address": {
      "street": "123 Main St",
      "city": "New York",
      "zipcode": "10001"
    },
    "active": true
  },
  "items": [
    {
      "id": 101,
      "product": "Laptop",
      "price": 999.99
    },
    {
      "id": 102,
      "product": "Mouse",
      "price": 29.99
    }
  ],
  "count": 42,
  "verified": null
};

const getNodeColor = (type, isHighlighted) => {
  if (isHighlighted) return '#EF4444';
  const colors = {
    object: '#8B5CF6',
    array: '#10B981',
    primitive: '#F59E0B'
  };
  return colors[type] || colors.primitive;
};

export default function JSONTreeVisualizer() {
  const [jsonInput, setJsonInput] = useState(JSON.stringify(sampleJSON, null, 2));
  const [error, setError] = useState('');
  const [searchPath, setSearchPath] = useState('');
  const [searchMessage, setSearchMessage] = useState('');
  const [darkMode, setDarkMode] = useState(false);
  const [treeData, setTreeData] = useState(null);
  const [highlightedPath, setHighlightedPath] = useState(null);
  const svgRef = useRef(null);
  const containerRef = useRef(null);
  const zoomRef = useRef(null);

  const buildTreeData = (obj, key = 'root', path = '$') => {
    const getType = (value) => {
      if (value === null) return 'primitive';
      if (Array.isArray(value)) return 'array';
      if (typeof value === 'object') return 'object';
      return 'primitive';
    };

    const type = getType(obj);
    const isPrimitive = type === 'primitive';

    const node = {
      name: key,
      value: isPrimitive ? obj : undefined,
      type: type,
      path: path,
      children: []
    };

    if (type === 'object' && obj !== null) {
      node.children = Object.entries(obj).map(([k, v]) => 
        buildTreeData(v, k, `${path}.${k}`)
      );
    } else if (type === 'array') {
      node.children = obj.map((item, index) => 
        buildTreeData(item, `[${index}]`, `${path}[${index}]`)
      );
    }

    if (node.children.length === 0) {
      delete node.children;
    }

    return node;
  };

  const renderTree = (data, highlightPath = null) => {
    if (!data || !svgRef.current) return;

    const container = containerRef.current;
    const width = container.clientWidth;
    const height = container.clientHeight;

    d3.select(svgRef.current).selectAll('*').remove();

    const svg = d3.select(svgRef.current)
      .attr('width', width)
      .attr('height', height);

    const g = svg.append('g');

    const zoom = d3.zoom()
      .scaleExtent([0.1, 3])
      .on('zoom', (event) => {
        g.attr('transform', event.transform);
      });

    svg.call(zoom);
    zoomRef.current = zoom;

    const treeLayout = d3.tree().size([height - 100, width - 300]);
    const root = d3.hierarchy(data);
    treeLayout(root);

    const link = g.selectAll('.link')
      .data(root.links())
      .enter().append('path')
      .attr('class', 'link')
      .attr('d', d3.linkHorizontal()
        .x(d => d.y)
        .y(d => d.x))
      .attr('fill', 'none')
      .attr('stroke', darkMode ? '#6B7280' : '#9CA3AF')
      .attr('stroke-width', 2);

    const node = g.selectAll('.node')
      .data(root.descendants())
      .enter().append('g')
      .attr('class', 'node')
      .attr('transform', d => `translate(${d.y},${d.x})`)
      .style('cursor', 'pointer')
      .on('click', (event, d) => {
        navigator.clipboard.writeText(d.data.path);
        alert(`Path copied: ${d.data.path}`);
      });

    node.append('rect')
      .attr('x', -60)
      .attr('y', -25)
      .attr('width', 120)
      .attr('height', 50)
      .attr('rx', 8)
      .attr('fill', d => getNodeColor(d.data.type, d.data.path === highlightPath))
      .attr('stroke', d => {
        const color = getNodeColor(d.data.type, d.data.path === highlightPath);
        return d3.color(color).darker(0.5);
      })
      .attr('stroke-width', 2)
      .style('filter', 'drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1))');

    node.append('text')
      .attr('dy', -5)
      .attr('text-anchor', 'middle')
      .attr('fill', 'white')
      .attr('font-weight', 'bold')
      .attr('font-size', '12px')
      .text(d => d.data.name.length > 15 ? d.data.name.substring(0, 15) + '...' : d.data.name);

    node.filter(d => d.data.value !== undefined)
      .append('text')
      .attr('dy', 12)
      .attr('text-anchor', 'middle')
      .attr('fill', 'white')
      .attr('font-size', '10px')
      .attr('opacity', 0.9)
      .text(d => {
        const val = String(d.data.value);
        return val.length > 18 ? val.substring(0, 18) + '...' : val;
      });

    node.append('title')
      .text(d => `Path: ${d.data.path}\nType: ${d.data.type}${d.data.value !== undefined ? `\nValue: ${d.data.value}` : ''}`);

    const initialTransform = d3.zoomIdentity.translate(150, height / 2).scale(0.8);
    svg.call(zoom.transform, initialTransform);

    if (highlightPath) {
      const highlightedNode = root.descendants().find(d => d.data.path === highlightPath);
      if (highlightedNode) {
        const scale = 1;
        const x = -highlightedNode.y * scale + width / 2;
        const y = -highlightedNode.x * scale + height / 2;
        svg.transition()
          .duration(750)
          .call(zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale));
      }
    }
  };

  const handleVisualize = () => {
    try {
      const parsed = JSON.parse(jsonInput);
      setError('');
      const tree = buildTreeData(parsed);
      setTreeData(tree);
      setSearchMessage('');
      setHighlightedPath(null);
    } catch (e) {
      setError(`Invalid JSON: ${e.message}`);
      setTreeData(null);
    }
  };

  const handleSearch = () => {
    if (!searchPath.trim()) {
      setSearchMessage('Please enter a search path');
      return;
    }

    if (!treeData) {
      setSearchMessage('Please visualize JSON first');
      return;
    }

    const normalizedSearch = searchPath.trim();
    
    const findNode = (node) => {
      if (node.path === normalizedSearch) return true;
      if (node.children) {
        return node.children.some(findNode);
      }
      return false;
    };

    if (findNode(treeData)) {
      setHighlightedPath(normalizedSearch);
      setSearchMessage('Match found!');
      renderTree(treeData, normalizedSearch);
    } else {
      setHighlightedPath(null);
      setSearchMessage('No match found');
      renderTree(treeData, null);
    }
  };

  const handleClear = () => {
    setJsonInput('');
    setTreeData(null);
    setError('');
    setSearchPath('');
    setSearchMessage('');
    setHighlightedPath(null);
  };

  const handleZoomIn = () => {
    if (zoomRef.current && svgRef.current) {
      d3.select(svgRef.current).transition().call(zoomRef.current.scaleBy, 1.3);
    }
  };

  const handleZoomOut = () => {
    if (zoomRef.current && svgRef.current) {
      d3.select(svgRef.current).transition().call(zoomRef.current.scaleBy, 0.7);
    }
  };

  const handleFitView = () => {
    if (zoomRef.current && svgRef.current && containerRef.current) {
      const width = containerRef.current.clientWidth;
      const height = containerRef.current.clientHeight;
      const initialTransform = d3.zoomIdentity.translate(150, height / 2).scale(0.8);
      d3.select(svgRef.current).transition().duration(750).call(zoomRef.current.transform, initialTransform);
    }
  };

  const handleDownload = () => {
    if (!svgRef.current) return;
    
    const svgData = new XMLSerializer().serializeToString(svgRef.current);
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const img = new Image();
    
    canvas.width = svgRef.current.clientWidth;
    canvas.height = svgRef.current.clientHeight;
    
    img.onload = () => {
      ctx.fillStyle = darkMode ? '#1F2937' : '#F9FAFB';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(img, 0, 0);
      const link = document.createElement('a');
      link.download = 'json-tree.png';
      link.href = canvas.toDataURL('image/png');
      link.click();
    };
    
    img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgData)));
  };

  useEffect(() => {
    handleVisualize();
  }, []);

  useEffect(() => {
    if (treeData) {
      renderTree(treeData, highlightedPath);
    }
  }, [treeData, highlightedPath, darkMode]);

  useEffect(() => {
    const handleResize = () => {
      if (treeData) {
        renderTree(treeData, highlightedPath);
      }
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [treeData, highlightedPath, darkMode]);

  const bgColor = darkMode ? 'bg-gray-900' : 'bg-gray-50';
  const textColor = darkMode ? 'text-gray-100' : 'text-gray-900';
  const cardBg = darkMode ? 'bg-gray-800' : 'bg-white';
  const inputBg = darkMode ? 'bg-gray-700' : 'bg-gray-50';
  const borderColor = darkMode ? 'border-gray-700' : 'border-gray-200';

  return (
    <div className={`min-h-screen ${bgColor} ${textColor} transition-colors duration-200`}>
      <div className="container mx-auto p-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">JSON Tree Visualizer</h1>
          <button
            onClick={() => setDarkMode(!darkMode)}
            className={`p-2 rounded-lg ${cardBg} border ${borderColor} hover:opacity-80 transition-opacity`}
          >
            {darkMode ? <Sun size={20} /> : <Moon size={20} />}
          </button>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          <div className={`lg:col-span-1 ${cardBg} rounded-lg shadow-lg p-6 border ${borderColor}`}>
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">JSON Input</h2>
              <button
                onClick={handleClear}
                className="p-2 rounded-lg bg-red-500 text-white hover:bg-red-600 transition-colors"
                title="Clear All"
              >
                <Trash2 size={18} />
              </button>
            </div>
            
            <textarea
              value={jsonInput}
              onChange={(e) => setJsonInput(e.target.value)}
              className={`w-full h-64 p-3 ${inputBg} rounded-lg border ${borderColor} font-mono text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent ${textColor}`}
              placeholder="Paste your JSON here..."
            />
            
            {error && (
              <div className="mt-3 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg text-sm">
                {error}
              </div>
            )}

            <button
              onClick={handleVisualize}
              className="w-full mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-colors"
            >
              Visualize Tree
            </button>

            <div className="mt-6">
              <h3 className="text-lg font-semibold mb-3">Search by Path</h3>
              <div className="flex gap-2">
                <input
                  type="text"
                  value={searchPath}
                  onChange={(e) => setSearchPath(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                  className={`flex-1 px-3 py-2 ${inputBg} rounded-lg border ${borderColor} text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent ${textColor}`}
                  placeholder="e.g., $.user.address.city"
                />
                <button
                  onClick={handleSearch}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                >
                  <Search size={18} />
                </button>
              </div>
              
              {searchMessage && (
                <div className={`mt-2 p-2 rounded-lg text-sm ${
                  searchMessage.includes('found!') 
                    ? 'bg-green-100 text-green-700 border border-green-400' 
                    : 'bg-yellow-100 text-yellow-700 border border-yellow-400'
                }`}>
                  {searchMessage}
                </div>
              )}

              <div className="mt-4 text-xs opacity-70">
                <p className="font-semibold mb-1">Path Examples:</p>
                <p>• $.user.name</p>
                <p>• $.items[0].product</p>
                <p>• $.user.address.city</p>
              </div>
            </div>
          </div>

          <div className={`lg:col-span-2 ${cardBg} rounded-lg shadow-lg border ${borderColor} relative`} style={{ height: '600px' }}>
            <div className="absolute top-4 right-4 z-10 flex gap-2">
              <button
                onClick={handleZoomIn}
                className="p-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-colors shadow-lg"
                title="Zoom In"
              >
                <ZoomIn size={18} />
              </button>
              <button
                onClick={handleZoomOut}
                className="p-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-colors shadow-lg"
                title="Zoom Out"
              >
                <ZoomOut size={18} />
              </button>
              <button
                onClick={handleFitView}
                className="p-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-colors shadow-lg"
                title="Fit View"
              >
                <Maximize2 size={18} />
              </button>
              <button
                onClick={handleDownload}
                className="p-2 rounded-lg bg-purple-600 text-white hover:bg-purple-700 transition-colors shadow-lg"
                title="Download as Image"
              >
                <Download size={18} />
              </button>
            </div>

            <div ref={containerRef} className="w-full h-full">
              <svg ref={svgRef} className={darkMode ? 'dark-mode' : ''} style={{ background: darkMode ? '#1F2937' : '#F9FAFB' }}></svg>
            </div>

            {!treeData && !error && (
              <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                <p className="text-gray-400 text-lg">Enter JSON and click "Visualize Tree" to begin</p>
              </div>
            )}
          </div>
        </div>

        <div className={`${cardBg} rounded-lg shadow-lg p-6 border ${borderColor}`}>
          <h3 className="text-lg font-semibold mb-3">Legend & Controls</h3>
          <div className="flex flex-wrap gap-4 mb-4">
            <div className="flex items-center gap-2">
              <div className="w-6 h-6 rounded" style={{ backgroundColor: '#8B5CF6' }}></div>
              <span className="text-sm">Object</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-6 h-6 rounded" style={{ backgroundColor: '#10B981' }}></div>
              <span className="text-sm">Array</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-6 h-6 rounded" style={{ backgroundColor: '#F59E0B' }}></div>
              <span className="text-sm">Primitive</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-6 h-6 rounded" style={{ backgroundColor: '#EF4444' }}></div>
              <span className="text-sm">Highlighted (Search Result)</span>
            </div>
          </div>
          <p className="text-sm opacity-70">💡 Tip: Click any node to copy its JSON path • Drag to pan • Use zoom controls</p>
        </div>
      </div>
    </div>
  );
} */